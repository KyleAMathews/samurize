version: "3.8"
name: "${APP_NAME:-electric}"

configs:
  postgres_config:
    file: "./postgres/postgres.conf"

volumes:
  pg_data:
  caddy_data: {}

networks:
  caddy:
    external: true

services:
  postgres:
    image: "${POSTGRESQL_IMAGE:-postgres:14-alpine}"
    environment:
      POSTGRES_DB: ${APP_NAME:-electric}
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: pg_password
    command:
      - -c
      - config_file=/etc/postgresql.conf
    configs:
      - source: postgres_config
        target: /etc/postgresql.conf
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - caddy
    ports:
      - 5432
    volumes:
      - pg_data:/var/lib/postgresql/data

  electric:
    image: "${ELECTRIC_IMAGE:-electricsql/electric:latest}"
    init: true
    environment:
      DATABASE_URL: postgresql://postgres:pg_password@postgres:5432/${APP_NAME:-electric}
      PG_PROXY_PASSWORD: proxy_password
      LOGICAL_PUBLISHER_HOST: electric
      AUTH_MODE: insecure
    ports:
      - ${ELECTRIC_PORT:-5133}:5133
      - ${ELECTRIC_PROXY_PORT:-65432}:65432
    networks:
      - caddy
    labels:
      caddy: "${ELECTRIC_PRODUCTION_DOMAIN:-example.com}"
      caddy.reverse_proxy: "{{upstreams http 5133}}"
    depends_on:
      - postgres
  otel-collector:
    image: otel/opentelemetry-collector-contrib
    volumes:
      - ./otel-collector-config.yaml:/etc/otelcol-contrib/config.yaml
    networks:
      - caddy
    ports:
      - 1888:1888 # pprof extension
      - 8888:8888 # Prometheus metrics exposed by the Collector
      - 8889:8889 # Prometheus exporter metrics
      - 13133:13133 # health_check extension
      - 4317:4317 # OTLP gRPC receiver
      - 4318:4318 # OTLP http receiver
      - 55679:55679 # zpages extension
    labels:
      caddy: "${ELECTRIC_PRODUCTION_DOMAIN:-example.com}"
      caddy.reverse_proxy: /v1/traces "{{upstreams http 4318}}"
      caddy.reverse_proxy.header_down_1: +Access-Control-Allow-Origin "*"
      caddy.reverse_proxy.header_down_2: +Access-Control-Allow-Methods "GET, POST, PATCH, OPTIONS"
      caddy.reverse_proxy.header_down_3: +Access-Control-Allow-Headers "Content-Type, Authorization, Time-Zone"
      caddy.reverse_proxy.header_down_4: +Access-Control-Allow-Credentials "true"
    environment:
      HONEYCOMB_API_KEY: ${HONEYCOMB_API_KEY}
      HONEYCOMB_DATASET: ${HONEYCOMB_DATASET}
  caddy:
    image: lucaslorentz/caddy-docker-proxy:ci-alpine
    ports:
      - 80:80
      - 443:443
    environment:
      - CADDY_INGRESS_NETWORKS=caddy
    networks:
      - caddy
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - caddy_data:/data
    restart: unless-stopped

